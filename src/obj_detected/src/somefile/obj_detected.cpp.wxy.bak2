/**
 * 
 * 功能：采集iaikinect2输出的彩色图和深度图数据，并进行网球的识别
 * 这个是我抄的
 */

#include <iostream>
#include <string>
#include <stdlib.h>
#include <vector>

#include <ros/ros.h>
#include <ros/spinner.h>
#include <sensor_msgs/CameraInfo.h>
#include <sensor_msgs/Image.h>
#include <std_msgs/String.h>
//将ROS下的sensor_msgs/Image消息类型转化成cv::Mat。
#include <cv_bridge/cv_bridge.h>
//头文件sensor_msgs/Image是ROS下的图像的类型，这个头文件中包含对图像进行编码的函数
#include <sensor_msgs/image_encodings.h>

#include <image_transport/image_transport.h>
#include <image_transport/subscriber_filter.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <mutex>

using namespace std;
using namespace cv;

Mat color_frame, depth_frame;
bool color_update_flag = false,
	 depth_update_flag = false;

//接收qhd图像
//其实我没太明白每个topic都是干嘛的，但是，我也忘了从哪看得资料，让收听_rect的
// string topic_color = "/kinect2/qhd/image_color_rect";
// string topic_depth = "/kinect2/qhd/image_depth_rect";

///////////////////////////////////////////////////////////////////////////////etc#include <stdio.h>
// #include <Kinect.h>
// #include <windows.h>
// #include<opencv2/opencv.hpp>
// #include <opencv2/core.hpp>
// #include <opencv2/highgui.hpp>
// #include <stdlib.h>
#include <time.h>
// #include <string.h>
// #include <strstream>
#include <Eigen/Dense>
#include <Eigen/Core>
// #include <iostream>
#include <array>

using namespace cv;
using namespace std;
using namespace Eigen;

//定义hsv空间下的“绿色”的色彩范围
cv::Scalar green_lower = cv::Scalar(35, 83, 86);
cv::Scalar green_upper = cv::Scalar(77, 255, 255);


class Detector
{
private:
	const string topic_color;
	const string topic_depth;

	bool color_update_flag, depth_update_flag;
	bool isRunning;

	ros::AsyncSpinner spinner;
	ros::NodeHandle nh;


	std::mutex lock;

	cv::Mat color_frame, depth_frame;

public:
	Detector(const std::string &topic_color, const std::string &topic_depth)
	:topic_color(topic_color),topic_depth(topic_depth),spinner(0),nh("~")
	{}

	~Detector(){}

	void run()
	{
		start();
		stop();
	}

private:
	void start()
	{
		isRunning = true;
	}

}





bool detect_tennis_by_color(cv::Mat *ColorImg, cv::Mat depth_img)
{

	clock_t start_time;
	int img_count = 1;

	// while (1)
	{
		cout << "frame  " << img_count++ << endl;
		start_time = clock();
		cout << "q1w" << endl;
		// 得到最新的一帧深度数据

		//Mat ColorImg(CHeight, CWidth, CV_8UC4);
		//UINT uColorPointNum = CWidth * CHeight;
		// UINT uColorBufferSize = uColorPointNum * 4 * sizeof(unsigned char);

		// pColorFrame->CopyConvertedFrameDataToArray(uColorBufferSize, (BYTE *)ColorImg.data, ColorImageFormat_Bgra);

		// ICoordinateMapper* pCoordinateMapper = nullptr;
		// if (m_pKinectSensor->get_CoordinateMapper(&pCoordinateMapper) != S_OK)
		// {
		// 	cerr << "get_CoordinateMapper failed" << endl;
		// 	return -1;
		// }

		// UINT32 uTableSize = 0;
		// PointF* aTable = nullptr;
		// auto res = pCoordinateMapper->GetDepthFrameToCameraSpaceTable(&uTableSize, &aTable);
		// // Enter main loop
		// DepthSpacePoint* pPointArray = new DepthSpacePoint[uColorPointNum];

		cv::Mat blurred;
		cv::Mat hsv;
		cv::Mat mask;
		// cv::imshow("image1000",ColorImg);
		// cv::waitKey(100000);
		cout << "qweqew" << endl;
		//像素尺寸
		// cv::resize(ColorImg, ColorImg, Size(480, 270));

		//高斯滤波去噪
		cv::GaussianBlur(*ColorImg, blurred, cv::Size(5, 5), 0);
		cout << "auf" << endl;
		//转化到hsv色彩空间
		cv::cvtColor(blurred, hsv, cv::COLOR_BGR2HSV);
		cout << "color" << endl;
		//二值化，阈值内白色，其他黑色
		cv::inRange(hsv, green_lower, green_upper, mask);

		// 开运算(open)：先腐蚀后膨胀的过程,平滑较大物体的边界的   同时并不明显改变其面积。
		// cv::morphologyEx(mask, mask, cv::MORPH_OPEN, NULL, cv::Point(-1, -1), 2);
		cout << "a" << endl;
		//找轮廓
		vector<vector<cv::Point>> contours;
		cv::findContours(mask, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE);

		cv::Point2f center1;
		cv::Point center1_int;
		float radius1;

		//找面积最大的边界，整个if0.001s，很神奇
		if (contours.size() > 0)
		{
			cout << "bbb" << endl;
			//此循环计算所有轮廓的面积
			vector<double> contours_area_vec;
			for (int i = 0; i < contours.size(); i++)
			{
				double temp_area;
				temp_area = cv::contourArea(contours[i]);
				contours_area_vec.push_back(temp_area);
			}

			//面积最大的下标
			int max_index = max_element(contours_area_vec.begin(), contours_area_vec.end()) - contours_area_vec.begin();

			//面积最大的轮廓
			vector<cv::Point> max_contour = contours[max_index];

			//面积最大轮廓最小内接圆中心点和半径
			cv::minEnclosingCircle(max_contour, center1, radius1);

			//用来存储center的int类型数值
			center1_int.x = center1.x;
			center1_int.y = center1.y;

			//面积最大边界和圆心
			cv::circle(*ColorImg, center1_int, (int)radius1, cv::Scalar(0, 255, 255), 2);
			cv::circle(*ColorImg, center1_int, 5, cv::Scalar(0, 0, 255), -1);

			//显示彩色图中圆心坐标
			string text1 = "(x,y) (" + to_string(center1_int.x) + "," + to_string(center1_int.y) + ")";
			cv::putText(*ColorImg, text1, cv::Point(10, 30), cv::FONT_HERSHEY_COMPLEX_SMALL, 0.7, cv::Scalar(0, 0, 255));
			cout << center1 << endl;
			cout << "real xy in rgb "
				 << "center1.x=" << center1_int.x * 4 << "   "
				 << "center1.y=" << center1_int.y * 4 << endl;

			if(depth_update_flag)
			{
				cout<<"inininin"<<endl;
				const uint16_t *itD = depth_img.ptr<uint16_t>(center1_int.y);
				cout<<"jjjjjjj"<<endl;
				register const float depthValue = (itD)[center1_int.x] / 1000.0f;
				cout<<"33333"<<endl;
				cout << depthValue << endl;
			}
		}
		//显示一点深度值
		//因为kinect传入的深度图数据格式是CV_16UC1，因此获得深度数据也用原始的16数据格式

		/*	int z = DepthImg.at<unsigned short>(center1_int.x, center1_int.y);
		cout << z << endl;*/



		// pCoordinateMapper->MapColorFrameToDepthSpace(uDepthPointNum, reinterpret_cast<UINT16*>(DepthImg.data), uColorPointNum, pPointArray);
		// int a = 0;
		// int b = 0;
		// int z = 0;
		// //开始对齐
		// 	cout << pPointArray[center1_int.y*4* 1920 + center1_int.x*4].X << " " << pPointArray[center1_int.y*4 * 1920 + center1_int.x*4].Y << "  " << endl;

		// 	a = (int)(pPointArray[center1_int.y *4* 1920 + center1_int.x*4].X);
		// 	b = (int)(pPointArray[center1_int.y *4* 1920 + center1_int.x*4].Y);
		// 	cout << a << b << endl;

		// 	if (a >= 0 && a < DepthImg.cols && b >= 0 && b < DepthImg.rows)
		// 	{
		// 		z = DepthImg.at<unsigned short>(cv::Point(a, b));
		// 		cout << z << endl;
		// 	}
		// 	else z = 0;

		// Matrix3d k;

		// k << 263.525, 0, 240,
		// 	0, 263.425, 135,
		// 	0, 0, 1;

		// Eigen::MatrixXd uv(3, 1);
		// uv(0, 0) = z*center1.x;
		// uv(1, 0) = z*center1.y;
		// uv(2, 0) = z;

		// Eigen::MatrixXd coord(3, 1);
		// coord = k.inverse()*uv;
		// cout << "相对于深度传感器(三个小红点的中心位置）的xyz（毫米为单位）"<<endl;
		// cout << coord << endl;

		// //显示图像
		// cv::imshow("depthImg", DepthImg8);
		// cv::imshow("ColorImg", ColorImg);
		// delete pPointArray;
		// DepthImg.release();
		// DepthImg8.release();
		// ColorImg.release();

		// pDepthFrame->Release();
		// pColorFrame->Release();

		// waitKey(1);

		// cout << "整体时间为" << (double)(clock() - start_time) / CLOCKS_PER_SEC << "s" << endl;
		// cout << "--------------------------------------" << endl;
	}
}

/////////////////////////////////////////////////////////////////////////////

void callback_color(const sensor_msgs::Image::ConstPtr image_data)
{
	// readImage里的
	// 声明一个CvImage指针的实例
	cv_bridge::CvImageConstPtr pCvImage;
	//将ROS消息中的图象信息提取，生成新cv类型的图象，复制给CvImage指针
	pCvImage = cv_bridge::toCvShare(image_data, image_data->encoding);
	
	pCvImage->image.copyTo(color_frame);
	color_update_flag = true;
}

void callback_depth(const sensor_msgs::Image::ConstPtr image_data)
{
	// 声明一个CvImage指针的实例
	cv_bridge::CvImageConstPtr pCvImage;
	//将ROS消息中的图象信息提取，生成新cv类型的图象，复制给CvImage指针
	pCvImage = cv_bridge::toCvShare(image_data, image_data->encoding);
	pCvImage->image.copyTo(depth_frame);
	depth_update_flag = true;
}

int main(int argc, char **argv)
{
	// string out_result;
	// std::mutex lock;
	ros::init(argc, argv, "obj_detected");
	if (!ros::ok())return 0;

	string topic_color = "/kinect2/qhd/image_color_rect";
	string topic_depth = "/kinect2/qhd/image_depth_rect";

	ROS_INFO("---topic color: %s ---\n", topic_color.c_str());
	ROS_INFO("---topic depth: %s ---\n", topic_depth.c_str());

	Detector detector(topic_color,topic_depth);

	ROS_INFO("starting...")

	detector.run();


	ros::NodeHandle nh;
	ros::Subscriber suber_color = nh.subscribe(topic_color, 50, callback_color);
	ros::Subscriber suber_depth = nh.subscribe(topic_depth, 50, callback_depth);
	ros::AsyncSpinner spinner(3); // Use 3 threads
	spinner.start();

	struct timeval time_val;
	//struct timezone tz;
	double time_stamp;

	while (ros::ok())
	{
		cv::Mat color_frame_store, depth_frame_store;
		if (color_update_flag)
		{
			gettimeofday(&time_val, NULL);
			lock.lock();
			color_frame_store = color_frame.clone();
			lock.unlock();
			detect_tennis_by_color(&color_frame, depth_frame_store);
			imshow("color", color_frame);

			color_update_flag = false;
			cout << "color timestamp:" << time_val.tv_sec << "." << time_val.tv_usec << endl;
		}

		if (depth_update_flag)
		{
			gettimeofday(&time_val, NULL);
			lock.lock();
			depth_frame_store = depth_frame.clone();
			lock.unlock();
			imshow("depth", depth_frame);
			depth_update_flag = false;
			cout << "depth timestamp:" << time_val.tv_sec << "." << time_val.tv_usec << endl;
		}
		if (waitKey(1) == 27)
			break;
		// 很特码神奇，为什么我把语句卸载这里，他图片就传不过来呢
		// if(depth_update_flag&&color_update_flag)
		if (0)
		{

			depth_update_flag = false;
			depth_update_flag = false;
			cout << "hereh" << endl;
			detect_tennis_by_color(&color_frame_store, depth_frame_store);
		}
	}

	ros::waitForShutdown();
	ros::shutdown();

	return 0;
}
